scalar DateTime
scalar Date
scalar Upload

type Query {
  books(token: String): [Book]!
  me: UserNode
}

type Mutation {
  #create_book(title: String!, published_at: Date!, cover: Upload!): Book!
  create_book(title: String!, published_at: Date!): Book!
  login(username: String!, password: String!): String
  logout: Boolean!
  create_user(username: String!, password: String!): UserNode

  verifyToken(token: String!): VerifyToken
  refreshToken(token: String!): RefreshToken
  tokenAuth(username: String!, password: String!): TokenAuth
}

type Book {
  title: String!
  pages: Int!
  published_at: Date!
  pk: Int!
}

type TokenAuth {
  token: String!
}

type VerifyToken {
  payload: UserNode
}

type RefreshToken {
  token: String!
  payload: UserNode
}

type UserNode {
  username: String
}
